name: mlflow
services:
  mlflow:
    build: 
      context: ./containers/mlflow
      args:
        - MLFLOW_VERSION=${MLFLOW_VERSION}
    container_name: mlflow
    env_file: 
      - .env
    ports:
      - 5000:5000
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DEFAULT_ARTIFACT_ROOT=${DEFAULT_ARTIFACT_ROOT}
      - AWS_REGION=${AWS_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    command: >
      mlflow server -h 0.0.0.0 -p 5000
      --backend-store-uri postgresql://mlflow:${POSTGRES_PASSWORD}@postgresql:5432/mlruns
      --default-artifact-root ${DEFAULT_ARTIFACT_ROOT}

    networks:
      - backend
    extra_hosts:
      - "host.docker.internal:host-gateway"

    depends_on:
      - postgresql

  postgresql:
    image: postgres:16.3
    container_name: postgres
    environment:
      - POSTGRES_DB=mlruns
      - POSTGRES_USER=mlflow
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
      - PGDATA=/var/lib/postgresql/data

    # restart: unless-stopped

    ports:
      - 5432:5432

    volumes:
      - mlrunsvol:/var/lib/postgresql/data:rw
      - ./backups:/tmp/backups
      - ./containers/postgres/make_backup.sh:/root/make_backup.sh
      - ./containers/postgres/restore_backups.sh:/root/restore_backups.sh

    networks:
      - backend
      
  nginx:
    build: ./containers/nginx
    container_name: nginx
    ports:
      - 80:80
    environment:
      - MLFLOW_DOMAIN=$MLFLOW_DOMAIN
      - STATUS_DOMAIN=$STATUS_DOMAIN
    volumes:
      - ./containers/nginx/nginx.conf:/etc/nginx/nginx.conf:rw
      - ./containers/nginx/nginx.conf.template:/etc/nginx/templates/nginx.conf.template:rw
      - ./.tmp/.htpasswd:/etc/nginx/.htpasswd
    networks:
      - backend
      - frontend
    depends_on:
      - mlflow
      - uptime-kuma
      - model_deployment

  uptime-kuma:
    restart: always
    ports:
        - 3001:3001
    volumes:
        - uptime-kuma:/app/data
    container_name: uptime-kuma
    image: louislam/uptime-kuma:1
    networks:
      - backend
      - frontend

  model_deployment:
    build:
      context: ./containers/model_deployment
      dockerfile: Dockerfile
    container_name: model_deployment
    env_file:
      - .env
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - AWS_REGION=${AWS_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    ports:
      - 8000:8000
      - "8001-8100:8001-8100"  # Range for dynamically deployed models
    volumes:
      - ./containers/model_deployment/deployments.py:/app/deployments.py:rw
      - ./containers/model_deployment/requirements.txt:/app/requirements.txt:rw
      - ./containers/model_deployment/entrypoint.sh:/app/entrypoint.sh:rw
      - ./containers/model_deployment/model_deployment.db:/app/model_deployment.db:rw
    command: >
      /app/entrypoint.sh
    networks:
      - backend
    depends_on:
      - mlflow

  frontend:
    build:
      context: ./containers/frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - 3000:3000
    environment:
      - REACT_APP_API_URL=/api
    networks:
      - backend
      - frontend
    depends_on:
      - model_deployment

networks:
  backend:
  frontend:

volumes:
  mlflow-users:  
  uptime-kuma:
  mlrunsvol:
